{% extends 'base.html.twig' %}

{# {% block title %}Planning du {{ current_date|date('d/m/Y') }}{% endblock %} #}
{% block title %}Planning du {{ date|date('d/m/Y') }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
       {# .container {     
        max-width: 1200px;
        margin: 0 auto;
        }
        .planning-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 5px;
        }

        .presence-card {
            background: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .presence-time {
            color: #666;
            font-size: 0.9em;
        }

        .presence-name {
            font-weight: bold;
            font-size: 1.1em;
            margin: 5px 0;
        }

        .present-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 0.8em;
            font-weight: bold;
        }

        .present-yes {
            background-color: #d4edda;
            color: #155724;
        }

        .present-no {
            background-color: #f8d7da;
            color: #721c24;
        }


        .table {
            padding: 10px;
            background:rgb(228, 228, 228);
            border-collapse: separate;

            border-spacing: 0 15px; /* Espace entre les lignes */
            margin: 20px auto;
            border-radius: 10px;
    
}

{# thead {
    
    background: RGB(228, 228, 228);
    background: linear-gradient(266deg, rgba(228, 228, 228, 1) 0%, rgba(160, 160, 160, 1) 26%, rgba(160, 160, 160, 1) 85%, rgba(228, 228, 228, 1) 100%);
} #}

{# .presence-cell {
    width: 55px;
    height: 25px;
    background-color: #f8f9fa;
}

.table tr{
        height: 40px;
}

.present {
    background-color: #28a745; /* Vert pour indiquer la présence */
    z-index: 20;
}

.absent {
    background-color:rgb(221, 46, 46); /* Rouge pour indiquer l'absence */
    z-index: 20;
}

.first{
    border-radius: 10px 0 0 10px; 
}

.last{
    border-radius: 0 10px 10px 0; 
}
tr td:first-child {
    padding-right: 1rem;
    font-weight: bold;
}

th { text-align: left; }

.sh{
    height: 90%;
    width: 1px;
    background-color: #4bf159;
    margin-right: 15px;
    display: inline-block;
    vertical-align: top;
}


.s2h{
    height: 50%;
    width: 1px;
    background-color: #4bf159;
    display: inline-block;
    vertical-align: top;
}

.switch-container {
    display: inline-flex;
    align-items: center;
}

.switch-checkbox {
    height: 0;
    width: 0;
    visibility: hidden;
}

.switch-label {
    display: flex;
    align-items: center;
    cursor: pointer;
    gap: 10px;
}

.switch-button {
    position: relative;
    display: block;
    width: 60px;
    height: 30px;
    background: #e0e0e0;
    border-radius: 100px;
    transition: 0.3s;
}

.switch-button:after {
    content: '';
    position: absolute;
    top: 3px;
    left: 3px;
    width: 24px;
    height: 24px;
    background: #fff;
    border-radius: 50%;
    transition: 0.3s;
}

.switch-checkbox:checked + .switch-label .switch-button {
    background: #28a745;
}

.switch-checkbox:checked + .switch-label .switch-button:after {
    left: calc(100% - 3px);
    transform: translateX(-100%);
}

.switch-text {
    font-size: 14px;
    color: #333;
    user-select: none;
}

/* Animation au survol */
.switch-button:hover {
    opacity: 0.8;
}

/* Focus pour l'accessibilité */
.switch-checkbox:focus + .switch-label .switch-button {
    box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
}



.planning-container{
    margin-top: 1rem;
}
.planning-container .week-navigation {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
  background: #f8f9fa;
  border-radius: 8px;
  margin-bottom: 1rem;
}
.planning-container .week-navigation .week-nav-button {
  text-decoration: none;
  transition: all 0.2s ease;
  display: flex;
  align-items: flex-start;
  margin-top: 4rem;
}
.planning-container .week-navigation .week-nav-button:first-child {
  margin-right: 2rem;
}
.planning-container .week-navigation .week-nav-button:last-child {
  margin-right: 2rem;
}
.planning-container .week-navigation .week-nav-button .nav-icon {
  width: 80px;
  height: 80px;
  fill: rgb(108, 116, 124);
  transition: fill 0.3s ease;
}
.planning-container .week-navigation .week-nav-button .nav-icon:hover {
  fill: rgb(248, 144, 99);
}
.planning-container .week-navigation .week-info {
  margin: 0 3rem;
}
.planning-container .week-navigation .week-info .week-number {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 500;
  margin-bottom: 2rem;
}
.planning-container .week-navigation .week-info .weekdays {
  display: flex;
  justify-content: center;
  gap: 1rem;
}
.planning-container .week-navigation .week-info .weekdays .day-box {
  width: 150px;
  aspect-ratio: 1/1;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  color: #333;
  transition: all 0.2s ease;
  background: white;
}
.planning-container .week-navigation .week-info .weekdays .day-box:hover {
  border: 1px solid rgb(248, 144, 99);
}
.planning-container .week-navigation .week-info .weekdays .day-box.current-day {
  border-color: #4caf50;
  background: white;
  transform: scale(1.05);
  box-shadow: 0 0 15px rgba(255, 64, 129, 0.3);
  z-index: 1;
}
.planning-container .week-navigation .week-info .weekdays .day-box.current-day .day-number {
  color: #c2185b;
}
.planning-container .week-navigation .week-info .weekdays .day-box.current-day .day-name {
  color: #880e4f;
}
.planning-container .week-navigation .week-info .weekdays .day-box.selected-day {
  border-color: #4caf50;
  background: #e8f5e9;
  transform: scale(1.1);
  z-index: 1;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}
.planning-container .week-navigation .week-info .weekdays .day-box.holiday {
  background: #fff3e0;
  border-color: #ff9800;
}
.planning-container .week-navigation .week-info .weekdays .day-box.holiday .holiday-indicator {
  font-size: 0.75rem;
  color: #f57c00;
  margin-top: 0.25rem;
}
.planning-container .week-navigation .week-info .weekdays .day-box.closed-day {
  background: #ffebee;
  border-color: #ef5350;
}
.planning-container .week-navigation .week-info .weekdays .day-box.closed-day .closure-indicator {
  font-size: 0.75rem;
  color: #c62828;
  margin-top: 0.5rem;
  text-align: center;
  font-weight: 500;
  padding: 0.25rem 0.5rem;
  background: rgba(239, 83, 80, 0.1);
  border-radius: 4px;
}
.planning-container .week-navigation .week-info .weekdays .day-box .day-name {
  font-size: 0.875rem;
  color: #6c757d;
  margin-bottom: 0.25rem;
}
.planning-container .week-navigation .week-info .weekdays .day-box .day-number {
  font-size: 1.5rem;
  font-weight: 500;
}


.nbr-childs {
    font-size: 0.9rem;
    color: #495057;
    margin-top: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.nbr-childs i {
    color: #0d6efd;
}

.alert-icon {
    color: #e67e22;
    font-size: 1.3em;
    cursor: pointer;
    position: relative;
    outline: none;
}
.alert-icon:hover::after,
.alert-icon:focus::after {
    content: attr(data-tooltip);
    position: absolute;
    left: 120%;
    top: 50%;
    transform: translateY(-50%);
    background: #fffbe6;
    color: #333;
    border: 1px solid #e67e22;
    border-radius: 6px;
    padding: 8px 12px;
    white-space: pre-line;
    min-width: 180px;
    z-index: 100;
    box-shadow: 0 2px 8px #0002;
    font-size: 0.95em;
}

.presence-icon {
    text-align: center;
    padding: 0 1rem 0 0;
}

/* Par défaut, on masque la colonne compacte */
.d-table-cell { display: none; }
.d-none { display: none; }
.d-sm-table-cell { display: table-cell; }

/* Sur petit écran (max 600px), on masque les colonnes horaires détaillées et on affiche la compacte */
@media (max-width: 1100px) {
    .d-sm-table-cell { display: none; }
    .d-table-cell { display: table-cell; }
}

/* Par défaut, on masque la navigation mobile et affiche la desktop */
.mobile-only { display: none; }
.desktop-only { display: block; }

/* Sur petit écran, on fait l’inverse */
@media (max-width: 900px) {
    .mobile-only { display: flex !important; }
    .desktop-only { display: none !important; }
}

.text-center {
    text-align: center;
}     #}
    </style>
{% endblock %}

{% block body %}

    {% set jours = {
        'Monday': 'Lundi',
        'Tuesday': 'Mardi',
        'Wednesday': 'Mercredi',
        'Thursday': 'Jeudi',
        'Friday': 'Vendredi',
        'Saturday': 'Samedi',
        'Sunday': 'Dimanche'
    } %}

    <div class="container planning-container">
    
        <div class="planning-nav mobile-only">
            <a href="{{ path('app_planning_day', {date: previous_date|date('Y-m-d')}) }}" 
               class="btn btn-outline-primary">
                <i class="fas fa-chevron-left"></i> Jour précédent
            </a>
            <div class="text-center">
                <h2>{{ jours[date|date('l')] }}</h2>
                <h2>{{ current_date|date('d/m/Y') }}</h2>
            </div>
            {# <h2>Planning du {{ date|date('d/m/Y') }}</h2> #}
            <a href="{{ path('app_planning_day', {date: next_date|date('Y-m-d')}) }}" 
               class="btn btn-outline-primary">
                Jour suivant <i class="fas fa-chevron-right"></i>
            </a>
        </div>





        <div class="week-navigation desktop-only">
            <a href="{{ path('app_planning_day', {date: date|date_modify('-7 days')|date('Y-m-d')}) }}" class="week-nav-button">
                <svg class="nav-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                    <path d="M41.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 256 246.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/>
                </svg>
            </a>

            <div class="week-info">
                <div class="week-number">
                    {% if weekDays is not empty %}
                        Semaine {{ weekDays[0].week }}
                    {% else %}
                        Semaine {{ date|date('W') }}
                    {% endif %}
                    <h2>Planning du {{ date|date('d/m/Y') }}</h2>
                </div>
                
                <div class="weekdays">
                    {% if weekDays is not empty %}
                        {% for calendarDay in weekDays %}
                            {% set isToday = calendarDay.date|date('Y-m-d') == "now"|date('Y-m-d') %}
                            {% set isopen = calendarDay.isopen == false %}
                            {% set isSelected = calendarDay.date|date('Y-m-d') == date|date('Y-m-d') %}
                            
                            <a href="{{ path('app_planning_day', {date: calendarDay.date|date('Y-m-d')}) }}" 
                               class="day-box {{ isToday ? 'current-day' }} {{ isopen ? 'closed-day' }} {{ isSelected ? 'selected-day' }}">
                                <div class="day-name">{{ calendarDay.day }}</div>
                                <div class="day-number">{{ calendarDay.date|date('d') }}</div>
                                {% if isopen %}
                                    <div class="closure-indicator">{{ 'Crèche fermée' }}</div>
                                {% else %}
                                    <div class="nbr-childs">
                                        {{ childrenCounts[calendarDay.date|date('Y-m-d')] ?? 0 }}
                                        <i class="fas fa-child"></i>
                                    </div>
                                {% endif %}
                            </a>
                        {% endfor %}
                    {% endif %}
                </div>
            </div>

            <a href="{{ path('app_planning_day', {date: date|date_modify('+7 days')|date('Y-m-d')}) }}" class="week-nav-button">
                <svg class="nav-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                    <path d="M278.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-160 160c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 73.4 118.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l160 160z"/>
                </svg>
            </a>
        </div>






        {% if presences is empty %}
            <div class="alert alert-info">
                Aucune présence prévue pour cette journée
            </div>
        {% else %}
            {# <div class="row">
                {% for presence in presences %}
                    <div class="col-md-6 col-lg-4">
                        <div class="presence-card">
                            <div class="presence-time">
                                {{ presence.heureArrivee|date('H:i') }} - {{ presence.heureDepart|date('H:i') }}
                            </div>
                            <div class="presence-name">
                                {{ presence.child.prenom }} {{ presence.child.nom }}
                            </div>
                            <div class="present-badge {{ presence.ispresent ? 'present-yes' : 'present-no' }}">
                                {{ presence.ispresent ? 'Présent' : 'Absent' }}
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div> #}

            <table class="table"> 
            {# <table class="table table-striped table-bordered"> #}
                <thead>
                    <tr>
                        <th>Enfant</th> 
                        <th>Âge (mois)</th>
                        <th></th> {# colonne pour l’icône #}
                        {% for heure in range(7, 19) %}
                            <th class="d-none d-sm-table-cell">{{ heure }}h</th>
                            <th class="d-none d-sm-table-cell"></th>
                        {% endfor %}

                        {# Colonnes horaires détaillées (grands écrans) #}
                        {# <th class="d-none d-sm-table-cell" colspan="26"> #}
                            {# On met un colspan pour garder la structure #}
                            {# {% for heure in range(7, 19) %}
                                <span>{{ heure }}h</span><span></span>{% if not loop.last %} | {% endif %}
                            {% endfor %}
                        </th> #}
                        {# Colonne compacte (petits écrans) #}
                        <th class="d-table-cell d-sm-none">Arrivée / Départ</th>


                        <th>Présence</th>
                    </tr>
                </thead>
                <tbody>
                    {% for presence in presences %}
                    <tr>
                        <td>
                            {{ presence.child.prenom }} {{ presence.child.nom }}
                        </td>
                        <td>
                            {# Calcul de l'âge en mois #}
                            {% set birth = presence.child.dateNaissance %}
                            {% set age = (date.diff(birth).y * 12 + date.diff(birth).m) %}
                            {{ age }}
                       </td>
                <td class="presence-icon">
                    {# Affichage de l'icône d'alerte si l'enfant a des allergies ou des remarques médicales #}
                    {% if presence.child.allergies or presence.child.remarquesMedicales %}
                        <span class="alert-icon" 
                            tabindex="0"
                            data-tooltip="        
                                {% if presence.child.allergies %}Allergies : {{ presence.child.allergies }}{% endif %}
                                {% if presence.child.allergies and presence.child.remarquesMedicales %}\{% endif %}
                                {% if presence.child.remarquesMedicales %}Remarques Médicales : {{ presence.child.remarquesMedicales }}{% endif %}
                            ">
                            &#9888;
                        </span>
                    {% endif %}
                </td>
                
                        {% for heure in range(7, 19) %}
                            <td class="presence-cell d-sm-table-cell
                            {% if (presence.heureArrivee|date('H') + (presence.heureArrivee|date('i')/60)) <= heure 
                                and (presence.heureDepart|date('H') + (presence.heureDepart|date('i')/60)) > heure %} {% if presence.ispresent %} present {% else %} absent {% endif %} {% endif %} 
                            {% if (presence.heureArrivee|date('H') + (presence.heureArrivee|date('i')/60)) == heure %} first {% endif %} 
                            {% if (presence.heureDepart|date('H') + (presence.heureDepart|date('i')/60)) == heure + 0.5 %} last {% endif %} 
                            {% if heure == 7  %} first {% endif %} ">
                            <span class="{% if heure > 7  %} sh {% endif %} "></span>
                            </td>
                            <td class="presence-cell d-sm-table-cell
                            {% if (presence.heureArrivee|date('H') + (presence.heureArrivee|date('i')/60)) <= heure + 0.5 
                                and (presence.heureDepart|date('H') + (presence.heureDepart|date('i')/60)) > heure + 0.5 %} {% if presence.ispresent %} present {% else %} absent {% endif %} {% endif %} 
                            {% if (presence.heureArrivee|date('H') + (presence.heureArrivee|date('i')/60)) == heure + 0.5 %} first {% endif %} 
                            {% if (presence.heureDepart|date('H') + (presence.heureDepart|date('i')/60)) == heure + 1 %} last {% endif %} 
                            {% if heure == 19  %} last {% endif %} ">
                            <span class="s2h"></span>
                            </td>
                        {% endfor %}
                        {# Cellule compacte (petits écrans) #}
                        <td class="d-table-cell">
                            {{ presence.heureArrivee|date('H:i') }} / {{ presence.heureDepart|date('H:i') }}
                        </td>
                        <td>
                            <div class="switch-container">
                                {% if date|date('Y-m-d') == "now"|date('Y-m-d') %}
                                    <input 
                                        type="checkbox" 
                                        class="switch-checkbox" 
                                        id="switchPresence_{{ presence.id }}"
                                        {% if presence.ispresent %}checked{% endif %}
                                        data-csrf-token="{{ csrf_token('update-presence') }}"
                                    >
                                {% endif %}
                                <label class="switch-label" for="switchPresence_{{ presence.id }}">
                                    <span class="switch-button"></span>
                                    <span class="switch-text">{{ presence.ispresent ? 'Présent' : 'Absent' }}</span>
                                </label>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>


        {% endif %}

        {# {% if is_granted('ROLE_ADMIN') %}
            <div class="mt-4">
                <a href="{{ path('app_daily_planning_create') }}" class="btn btn-success">
                    <i class="fas fa-plus"></i> Ajouter une présence
                </a>
            </div>
        {% else %}
            <div class="alert alert-warning mt-4">
                Vous n'avez pas les droits pour ajouter des présences.
            </div>

        {% endif %} #}
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.querySelectorAll('.switch-checkbox').forEach(checkbox => {
            checkbox.addEventListener('change', function() {
                const presenceId = this.id.split('_')[1];
                const isPresent = this.checked;
                const token = this.dataset.csrfToken;

                fetch(`/planning/update-presence/${presenceId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': token
                    },
                    body: JSON.stringify({ isPresent: isPresent })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erreur serveur');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                    // Mettre à jour le texte du label
                    const textSpan = this.nextElementSibling.querySelector('.switch-text');
                    textSpan.textContent = isPresent ? 'Présent' : 'Absent';
                    
                    // Mettre à jour les cellules du planning
                    const row = this.closest('tr');
                    const presenceCells = row.querySelectorAll('.presence-cell');
                    
                    presenceCells.forEach(cell => {
                        if (cell.classList.contains('present') || cell.classList.contains('absent')) {
                            cell.classList.remove('present', 'absent');
                            cell.classList.add(isPresent ? 'present' : 'absent');
                        }
                    });
                    
                    // Animation de confirmation
                    const switchLabel = this.nextElementSibling;
                    switchLabel.style.animation = 'confirm 0.3s';
                    setTimeout(() => switchLabel.style.animation = '', 300);
                })
                .catch(error => {
                    console.error('Erreur:', error);
                    alert('Une erreur est survenue: ' + error.message);
                    this.checked = !this.checked;

                    // En cas d'erreur, remettre les classes originales
                    const row = this.closest('tr');
                    const presenceCells = row.querySelectorAll('.presence-cell');
                    presenceCells.forEach(cell => {
                        if (cell.classList.contains('present') || cell.classList.contains('absent')) {
                            cell.classList.remove('present', 'absent');
                            cell.classList.add(!isPresent ? 'present' : 'absent');
                        }
                    });
                });
            });
        });
    </script>

    <style>
        @keyframes confirm {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }
    </style>
{% endblock %}