{% extends 'base.html.twig' %}

{% block title %}Inscription{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        /* Masquer le fieldset généré automatiquement */
        #inscription_form_responsables > fieldset {
            border: none;
            margin: 0;
            padding: 0;
        }

        .form-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 20px;
        }

        .child-section {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }

        .bottom-sections {
            display: flex;
            gap: 20px;
            margin-top: 2rem;
        }

        .bottom-section {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            flex: 1;
            min-height: 400px;
        }

        .schedule-table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
        }

        .schedule-table th,
        .schedule-table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
        }

        .schedule-table th {
            background-color: #f8f9fa;
        }

        .schedule-table tr:hover {
            background-color: #f5f5f5;
        }

        /* Styles pour les champs de formulaire */
        .row {
            margin-right: -10px;
            margin-left: -10px;
            margin-bottom: 1rem;
        }

        .col-md-6, .col-12 {
            padding: 0 10px;
        }

        textarea {
            width: 80%;
            min-height: 32px;
            {# resize: vertical; #}
        }

        /* Style pour le groupe de boutons radio du genre */
        .form-check-inline {
            margin-right: 1rem;
        }

        /* Style pour les champs de date */
        input[type="date"] {
            width: 140px;
            padding: 0.375rem 0.75rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
        }

        /* Ajustement pour les champs monétaires */
        input[type="number"] {
            text-align: right;
            padding-right: 25px;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .bottom-sections {
                flex-direction: column;
            }
            
            .schedule-table {
                display: block;
                overflow-x: auto;
            }

            .row {
                margin-right: 0;
                margin-left: 0;
                margin-bottom: 1rem;
            }

            .col-md-6, .col-12 {
                padding: 0;
            }
        }
        .flex {
            display: flex;
            width: 40%;
            justify-content: space-between;
            align-items: center;
        }
        .flex-column {
            display: flex;
            flex-direction: column;
        }

        /* Styles pour les sections responsable et user */
        .form-group {
            margin-bottom: 0.8rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            font-size: 1rem;
        }

        .responsables-container {
            position: relative;
        }

        .add-responsable-btn {
            position: absolute;
            top: -40px;
            right: 0;
            background: #28a745;
            color: white;
            border: none;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            font-size: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .add-responsable-btn:hover {
            transform: scale(1.1);
            background: #218838;
        }

        .responsable-form {
            background: #f8f9fa;
            padding: 1.5rem;
            border-radius: 8px;
            margin-bottom: 1rem;
            position: relative;
        }

        .remove-responsable-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            color: #dc3545;
            background: none;
            border: none;
            font-size: 18px;
            cursor: pointer;
        }

        /* Animation pour les nouveaux responsables */
        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .new-responsable {
            animation: slideDown 0.3s ease-out;
        }

        /* Styles spécifiques pour le formulaire Users */
        .user-form-container {
            padding: 1.5rem;
            background: #f8f9fa;
            border-radius: 8px;
        }

        .user-form-group {
            margin-bottom: 0.8rem;
        }

        .user-form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .user-form-group input {
            width: 95%;
            padding: 0.2rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            font-size: 1rem;
            transition: border-color 0.15s ease-in-out;
        }

        .user-form-group input:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }

        /* Style pour les choix de rôles */
        .user-roles-container {
            margin-bottom: 1.5rem;
        }

        .user-roles-container .form-check {
            margin-bottom: 0.5rem;
        }

        .user-roles-container .form-check-input {
            margin-right: 0.5rem;
        }

        /* Style pour le mot de passe */
        .password-container {
            position: relative;
        }

        .password-strength {
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Style pour l'adresse */
        .address-group {
            display: grid;
            grid-template-columns: 2fr 1fr 2fr;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        /* Style pour les roles */
        .roles-container {
            display: flex;
            flex-direction: row !important;  /* Force l'alignement horizontal */
            flex-wrap: nowrap;              /* Empêche le retour à la ligne */
            gap: 1.5rem;                    /* Espace entre les éléments */
            justify-content: space-between;  /* Distribution égale */
            padding: 0.75rem 0;
            width: 100%;
        }

        .roles-container > div {
            display: flex;
            align-items: center;
            margin: 0 !important;           /* Supprime les marges par défaut */
        }

        .roles-container label {
            display: flex;
            align-items: center;
            padding: 0.5rem 1rem;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: all 0.2s ease;
            margin: 0 !important;           /* Supprime les marges par défaut */
            white-space: nowrap;            /* Empêche le retour à la ligne du texte */
        }

        .roles-container input[type="checkbox"] {
            margin-right: 0.5rem;
            margin-top: 0;                  /* Alignement vertical */
        }

        /* Style pour les roles sélectionnés */
        .roles-container input[type="checkbox"]:checked + label {
            background: #007bff;
            color: white;
            border-color: #0056b3;
        }

        /* Pour aligner les checkbox avec le texte */
        .role-checkbox {
            transform: translateY(1px);
        }

        /* Pour rendre le conteneur des rôles plus compact */
        .user-form-group:has(.roles-container) {
            margin-bottom: 1rem;
        }

        /* Styles pour les erreurs */
        .form-error {
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        .form-error-field {
            border-color: #dc3545 !important;
        }

        .alert {
            padding: 1rem;
            margin-bottom: 1rem;
            border: 1px solid transparent;
            border-radius: 0.25rem;
        }

        .alert-danger {
            color: #721c24;
            background-color: #f8d7da;
            border-color: #f5c6cb;
        }

        .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }

        .invalid-feedback {
            display: block;
            color: #dc3545;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }

        /* Nouveaux styles pour les champs de responsables */
        .responsable-field {
            {# margin-bottom: 1rem;
            padding: 0.5rem; #}
        }

        .responsable-field label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #333;
        }

        .responsable-field .form-control {
            width: 95%;
            padding: 0.2rem;
            font-size: 1rem;
            {# line-height: 1.5; #}
            color: #495057;
            background-color: #fff;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

        .responsable-field .form-control:focus {
            color: #495057;
            background-color: #fff;
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }

        .responsable-field select.form-control {
            height: calc(1.5em + 0.75rem + 2px);
        }

        /* Style pour le conteneur de responsable */
        #inscription_form_responsables_0 {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 0.25rem;
            margin-bottom: 1rem;
        }
    </style>
{% endblock %}

{% block body %}
{% for label, messages in app.flashes %}
    {% for message in messages %}
        <div class="alert alert-{{ label }}">{{ message }}</div>
    {% endfor %}
{% endfor %}
    <div class="form-container">
        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ message }}
            </div>
        {% endfor %}

        {{ form_start(form, {
            'attr': {
                'id': 'inscription-form',
                'data-turbo': false
            }
        }) }}

        {% if form_errors(form) %}
            <div class="alert alert-danger">
                {{ form_errors(form) }}
            </div>
        {% endif %}

        {# Affiche les erreurs de chaque sous-formulaire #}
        {% for child in form %}
            {% if form_errors(child) %}
                <div class="alert alert-danger">
                    {{ form_label(child) }} : {{ form_errors(child) }}
                </div>
            {% endif %}
        {% endfor %}

        {# Explicit CSRF token rendering #}
        {# <input type="hidden" name="_csrf_token" value="{{ csrf_token('inscription_form') }}"> #}

        <h1 class="text-center mb-4">Inscription nouvel enfant</h1>
        {# Affichage des erreurs globales du formulaire #}
        {% if not form.vars.valid %}
            <div class="alert alert-danger">
                {{ form_errors(form) }}
            </div>
        {% endif %}

        {# Affichage des messages flash #}
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}

        {% if form_errors(form) %}
            <div class="alert alert-danger">
                {{ form_errors(form) }}
            </div>
        {% endif %}

        {% for message in app.flashes('error') %}
            <div class="alert alert-danger">
                {{ message }}
            </div>
        {% endfor %}

            <div class="child-section">
                <h2>Informations de l'enfant</h2>
                {% if not form.child.vars.valid %}
                    <div class="alert alert-danger">
                        {{ form_errors(form.child) }}
                    </div>
                {% endif %}
                
                {# Informations générales de l'enfant #}
                <div class="row flex">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.nom, {'label': 'Nom'}) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.prenom, {'label': 'Prénom'}) }}
                    </div>
                </div>

                <div class="row flex">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.date_naissance, {'label': 'Date de naissance '}) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_widget(form.child.genre, {'label': 'Genre'}) }}
                    </div>
                </div>

                <div class="row ">
                    <div class="col-12 mb-3">
                        {{ form_row(form.child.allergies, {'label': 'Allergies'}) }}
                    </div>
                </div>

                <div class="row">
                    <div class="col-12 mb-3">
                        {{ form_row(form.child.remarques_medicales, {'label': 'Remarques médicales'}) }}
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.revenus, {'label': 'Revenus du foyer '}) }}
                    </div>
                </div>

                <div class="row flex">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.date_entree, {'label': 'Date d\'entrée'}) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.date_sortie, {'label': 'Date de sortie'}) }}
                    </div>
                </div>

                

                {# Tableau des horaires - reste inchangé #}
                <table class="schedule-table">
                    <thead>
                        <tr>
                            <th>Jour</th>
                            <th>Heure d'arrivée</th>
                            <th>Heure de départ</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Lundi</td>
                            <td>{{ form_widget(form.child.lundi_a) }}</td>
                            <td>{{ form_widget(form.child.lundi_d) }}</td>
                        </tr>
                        <tr>
                            <td>Mardi</td>
                            <td>{{ form_widget(form.child.mardi_a) }}</td>
                            <td>{{ form_widget(form.child.mardi_d) }}</td>
                        </tr>
                        <tr>
                            <td>Mercredi</td>
                            <td>{{ form_widget(form.child.mercredi_a) }}</td>
                            <td>{{ form_widget(form.child.mercredi_d) }}</td>
                        </tr>
                        <tr>
                            <td>Jeudi</td>
                            <td>{{ form_widget(form.child.jeudi_a) }}</td>
                            <td>{{ form_widget(form.child.jeudi_d) }}</td>
                        </tr>
                        <tr>
                            <td>Vendredi</td>
                            <td>{{ form_widget(form.child.vendredi_a) }}</td>
                            <td>{{ form_widget(form.child.vendredi_d) }}</td>
                        </tr>
                    </tbody>
                </table>

                <div class="row flex">
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.date_debut, {'label': 'Date de début'}) }}
                    </div>
                    <div class="col-md-6 mb-3">
                        {{ form_row(form.child.date_fin, {'label': 'Date de fin'}) }}
                    </div>
                </div>
                
            </div>

            <div class="bottom-sections">
                <div class="bottom-section">
                    <h2>Accompagnateurs</h2>
                    <div class="responsables-container" data-prototype="{{ form_widget(form.responsables.vars.prototype)|e('html_attr') }}">
                        <button type="button" class="add-responsable-btn" title="Ajouter un responsable">+</button>
                        {{ form_widget(form.responsables, {'attr': {'class': 'responsables-list'}}) }}
                    </div>
                </div>

                <div class="bottom-section">
                    <h2>Accès Famille</h2>
                    <div class="user-form-container">
                        {# <div class="user-form-group">
                            {{ form_label(form.user.roles, 'Rôles de l\'utilisateur') }}
                        {{ form_widget(form.user.roles) }}
                        </div> #}
                        {# <div class="user-form-group">
                            {{ form_label(form.user.email, 'Email') }}
                            {{ form_widget(form.user.email, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="user-form-group password-container">
                            {{ form_label(form.user.plainPassword, 'Mot de passe') }}
                            {{ form_widget(form.user.plainPassword, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="user-form-group">
                            {{ form_label(form.user.nom, 'Nom') }}
                            {{ form_widget(form.user.nom, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="user-form-group">
                            {{ form_label(form.user.prenom, 'Prénom') }}
                            {{ form_widget(form.user.prenom, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="user-form-group">
                            {{ form_label(form.user.tel, 'Téléphone') }}
                            {{ form_widget(form.user.tel, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="address-group">
                            {{ form_row(form.user.adress, {'attr': {'class': 'form-control'}}) }}
                            {{ form_row(form.user.cp, {'attr': {'class': 'form-control'}}) }}
                            {{ form_row(form.user.ville, {'attr': {'class': 'form-control'}}) }}
                        </div> #}

                        {# <div>
                            {{ form_row(form.userSelector.userChoice) }}
                        </div>

                        <div id="existing-user-block" class="existing-user-container">
                            {{ form_row(form.userSelector.existingUser) }}
                        </div> #}

                        {# <div id="new-user-block">
                            {{ form_widget(form.user) }}
                        </div> #}

                        <div id="new-user-block" class="new-user-form">
                            {# Existing user form fields #}
                            {# {{ form_widget(form.user) }} #}
                            
                            <div class="user-form-group">
                                {{ form_label(form.user.email, 'Email') }}
                                {{ form_widget(form.user.email, {'attr': {'class': 'form-control'}}) }}
                            </div>

                            <div class="user-form-group password-container">
                                {{ form_label(form.user.plainPassword, 'Mot de passe') }}
                                {{ form_widget(form.user.plainPassword, {'attr': {'class': 'form-control'}}) }}
                            </div>

                            <div class="user-form-group">
                                {{ form_label(form.user.nom, 'Nom') }}
                                {{ form_widget(form.user.nom, {'attr': {'class': 'form-control'}}) }}
                            </div>

                            <div class="user-form-group">
                                {{ form_label(form.user.prenom, 'Prénom') }}
                                {{ form_widget(form.user.prenom, {'attr': {'class': 'form-control'}}) }}
                            </div>

                            <div class="user-form-group">
                                {{ form_label(form.user.tel, 'Téléphone') }}
                                {{ form_widget(form.user.tel, {'attr': {'class': 'form-control'}}) }}
                            </div>

                            <div class="address-group user-form-group">
                                {{ form_row(form.user.adress, {'attr': {'class': 'form-control'}}) }}
                                {{ form_row(form.user.cp, {'attr': {'class': 'form-control'}}) }}
                                {{ form_row(form.user.ville, {'attr': {'class': 'form-control'}}) }}
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="submit-container">
                <button type="submit" class="btn btn-primary btn-lg btn-submit">
                    Valider l'inscription
                </button>
            </div>
        {# {{ form_end(form, {'render_rest': false}) }}
        {{ form_row(form._csrf_token) }} #}
        {{ form_end(form) }} 
    </div>

    {% for label, messages in app.flashes %}
        {% for message in messages %}
            <div class="alert alert-{{ label }}">
                {{ message }}
            </div>
        {% endfor %}
    {% endfor %}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Use IIFE to avoid global scope pollution
        (function() {
            class ResponsablesFormManager {
                constructor() {
                    this.init();
                }

                init() {
                    this.container = document.querySelector('.responsables-container');
                    if (!this.container) return;

                    this.addButton = this.container.querySelector('.add-responsable-btn');
                    this.list = this.container.querySelector('.responsables-list');
                    this.counter = this.list.children.length;

                    this.bindEvents();
                    this.initExistingButtons();
                }

                bindEvents() {
                    if (this.addButton) {
                        this.addButton.addEventListener('click', () => this.createNewForm());
                    }
                }

                handleRemoveButton(btn) {
                    btn.addEventListener('click', () => {
                        btn.closest('.responsable-form').remove();
                    });
                }

                createNewForm() {
                    const prototype = this.container.dataset.prototype;
                    const newForm = prototype.replace(/__name__/g, this.counter);
                    const div = document.createElement('div');
                    div.classList.add('responsable-form', 'new-responsable');
                    div.innerHTML = newForm;
                    
                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.classList.add('remove-responsable-btn');
                    removeBtn.innerHTML = '&times;';
                    removeBtn.title = 'Supprimer ce responsable';
                    div.appendChild(removeBtn);
                    
                    this.handleRemoveButton(removeBtn);
                    this.list.appendChild(div);
                    this.counter++;
                }

                initExistingButtons() {
                    document.querySelectorAll('.remove-responsable-btn').forEach(btn => {
                        this.handleRemoveButton(btn);
                    });
                }
            }

            function initForm() {
                if (window.responsablesManager) {
                    window.responsablesManager = null;
                }
                window.responsablesManager = new ResponsablesFormManager();
            }

            // Handle both Turbo and regular page loads
            document.addEventListener('turbo:load', initForm);
            document.addEventListener('DOMContentLoaded', function() {
                if (!window.Turbo) {
                    initForm();
                }
            });
        })();

        {# document.addEventListener('DOMContentLoaded', function() {
            const userChoice = document.querySelector('[name$="[userChoice]"]');
            const newUserForm = document.querySelector('.new-user-form');
            const existingUserSelect = document.querySelector('.existing-user-select');

            function toggleUserForms() {
                const isNewUser = document.querySelector('[name$="[userChoice]"][value="new"]').checked;
                newUserForm.style.display = isNewUser ? 'block' : 'none';
                existingUserSelect.parentElement.style.display = isNewUser ? 'none' : 'block';
            }

            // Initial state
            toggleUserForms();

            // Listen for changes
            document.querySelectorAll('[name$="[userChoice]"]').forEach(radio => {
                radio.addEventListener('change', toggleUserForms);
            });
        }); #}


        {# document.addEventListener('DOMContentLoaded', function() {
            function toggleUserBlocks() {
                const radios = document.querySelectorAll('input[name$="[userChoice]"]');
                let value = 'new';
                radios.forEach(radio => { if (radio.checked) value = radio.value; });
                const existingBlock = document.getElementById('existing-user-block');
                const newBlock = document.getElementById('new-user-block');
                existingBlock.style.display = (value === 'existing') ? 'block' : 'none';
                newBlock.style.display = (value === 'new') ? 'block' : 'none';

                // Désactive tous les champs du bloc masqué
                newBlock.querySelectorAll('input, select, textarea').forEach(el => {
                    el.disabled = (value !== 'new');
                });
                existingBlock.querySelectorAll('input, select, textarea').forEach(el => {
                    el.disabled = (value !== 'existing');
                });
            }
            document.querySelectorAll('input[name$="[userChoice]"]').forEach(radio => {
                radio.addEventListener('change', toggleUserBlocks);
            });
            toggleUserBlocks();
        }); #}

        // Validation des horaires
        document.addEventListener('DOMContentLoaded', function() {
            const jours = ['lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi'];
            
            jours.forEach(jour => {
                const arriveeName = `inscription_form[child][${jour}_a]`;
                const departName = `inscription_form[child][${jour}_d]`;
                
                const arriveeHour = document.querySelector(`select[name="${arriveeName}[hour]"]`);
                const arriveeMinute = document.querySelector(`select[name="${arriveeName}[minute]"]`);
                const departHour = document.querySelector(`select[name="${departName}[hour]"]`);
                const departMinute = document.querySelector(`select[name="${departName}[minute]"]`);
                
                if (arriveeHour && departHour) {
                    const validateHoraires = () => {
                        const arriveeH = arriveeHour.value;
                        const arriveeM = arriveeMinute.value;
                        const departH = departHour.value;
                        const departM = departMinute.value;
                        
                        // Réinitialiser les messages d'erreur
                        arriveeHour.classList.remove('is-invalid');
                        departHour.classList.remove('is-invalid');
                        
                        // Si un champ est rempli, l'autre doit l'être aussi
                        if ((arriveeH && !departH) || (!arriveeH && departH)) {
                            arriveeHour.classList.add('is-invalid');
                            departHour.classList.add('is-invalid');
                            showError(`Pour le ${jour}, vous devez renseigner à la fois l'heure d'arrivée et l'heure de départ`);
                            return false;
                        }
                        
                        // Si les deux sont remplis, vérifier que départ > arrivée
                        if (arriveeH && departH) {
                            const arriveeTime = parseInt(arriveeH) * 60 + parseInt(arriveeM || 0);
                            const departTime = parseInt(departH) * 60 + parseInt(departM || 0);
                            
                            if (departTime <= arriveeTime) {
                                departHour.classList.add('is-invalid');
                                showError(`Pour le ${jour}, l'heure de départ doit être supérieure à l'heure d'arrivée`);
                                return false;
                            }
                        }
                        
                        return true;
                    };
                    
                    // Ajouter les événements de validation
                    [arriveeHour, arriveeMinute, departHour, departMinute].forEach(select => {
                        select.addEventListener('change', validateHoraires);
                    });
                }
            });
            
            function showError(message) {
                // Créer ou mettre à jour le message d'erreur
                let errorDiv = document.getElementById('horaires-error');
                if (!errorDiv) {
                    errorDiv = document.createElement('div');
                    errorDiv.id = 'horaires-error';
                    errorDiv.className = 'alert alert-danger mt-2';
                    document.querySelector('.schedule-table').after(errorDiv);
                }
                errorDiv.textContent = message;
            }
            
            // Validation du formulaire avant soumission
            document.querySelector('form[name="inscription_form"]').addEventListener('submit', function(e) {
                const hasErrors = Array.from(document.querySelectorAll('.is-invalid')).length > 0;
                if (hasErrors) {
                    e.preventDefault();
                    showError('Veuillez corriger les erreurs dans les horaires avant de soumettre le formulaire.');
                }
            });
        });
    </script>
{% endblock %}
