<link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css" rel="stylesheet">
<style>
    #calendar-{{ this.childId }} {
        margin: 2rem 0;
        padding: 1rem;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        min-height: 500px;
    }
    .fc-event {
        cursor: pointer;
    }
    .fc-event.present {
        background-color: #28a745;
        border-color: #28a745;
    }
    .fc-event.absent {
        background-color: #ffc107;
        border-color: #ffc107;
    }
</style>

<div {{ attributes }}>
    <div id="calendar-{{ this.childId }}"></div>
</div>

<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
<script>
function initializeCalendar() {
    console.log('Initialisation du calendrier: calendar-{{ this.childId }}');
    
    // Vérifier que FullCalendar est disponible
    if (typeof FullCalendar === 'undefined') {
        console.warn('FullCalendar pas encore chargé, nouvelle tentative...');
        setTimeout(initializeCalendar, 100);
        return;
    }

    const calendarEl = document.getElementById('calendar-{{ this.childId }}');
    if (!calendarEl) {
        console.error('Élément calendrier introuvable');
        return;
    }

    try {
        // Utilise la méthode getEvents() de ton composant
        const events = {{ this.getEvents()|json_encode|raw }};
        console.log('Données brutes:', events);

        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            locale: 'fr',
            events: events,
            eventDisplay: 'block',
            dayMaxEvents: 3,
            eventClick: function(info) {
                console.log('Événement cliqué:', info.event);
            },
            height: 'auto'
        });

        calendar.render();
        console.log('Calendrier initialisé avec succès');
        
    } catch (error) {
        console.error('Erreur lors de l\'initialisation du calendrier:', error);
    }
}

// Initialiser selon l'état du DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeCalendar);
} else {
    setTimeout(initializeCalendar, 50);
}

// Gérer Turbo
document.addEventListener('turbo:load', function() {
    setTimeout(initializeCalendar, 50);
});

// Gérer les reconnexions du composant Live
document.addEventListener('live:connect', function(event) {
    if (event.target.id === 'calendar-{{ this.childId }}' || event.target.closest('#calendar-{{ this.childId }}')) {
        setTimeout(initializeCalendar, 50);
    }
});
</script>